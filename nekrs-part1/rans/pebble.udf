#include "udf.hpp"
#include "plugins/RANSktau.hpp"

static dfloat inlet_v;

static occa::kernel scalarScaledAddKernel;

void userq(nrs_t *nrs, double time, occa::memory o_S, occa::memory o_FS)
{
  RANSktau::updateSourceTerms();
}

void uservp(nrs_t *nrs, double time, occa::memory o_U, occa::memory o_S, occa::memory o_UProp, occa::memory o_SProp)
{
  RANSktau::updateProperties();
}

void UDF_LoadKernels(occa::properties & kernelInfo)
{
  // get parameter from .par file
  platform->par->extract("casedata", "my_inlet_v", inlet_v);

  // send parameter to device
  kernelInfo["defines/p_my_inlet_v"] = inlet_v;

  RANSktau::buildKernel(nrs);
}

void UDF_Setup(nrs_t *nrs)
{
  udf.properties = &uservp;
  udf.sEqnSource = &userq;

  const int scalarFieldStart = 0;
  platform->options.getArgs("VISCOSITY", mueLam);
  platform->options.getArgs("DENSITY", rho);

  RANSktau::setup(nrs, mueLam, rho, scalarFieldStart);
}

void UDF_ExecuteStep(nrs_t *nrs, double time, int tstep)
{
}
